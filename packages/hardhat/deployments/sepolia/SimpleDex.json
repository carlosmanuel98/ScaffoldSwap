{
  "address": "0xa53d56000D3bEa595Ea5b13F7dA928541B75a0E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "direction",
          "type": "string"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ca54021fe77b4d358f4b0bb712badf767286d2055efcbf0fb61237e541c4784",
  "receipt": {
    "to": null,
    "from": "0xaada627eAC5cAd86acC8f0DCD01De15a52A44bBD",
    "contractAddress": "0xa53d56000D3bEa595Ea5b13F7dA928541B75a0E4",
    "transactionIndex": 20,
    "gasUsed": "1002129",
    "logsBloom": "0x00000000000000000000000001000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000008000800000000000000000000000000000000001000008000000000000000000000000000000020000000000000000002a00000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x595e6645d6b6d562f75fe483bb1a1e2cd41fcbd7ecb430eaa4e6c06deb440700",
    "transactionHash": "0x2ca54021fe77b4d358f4b0bb712badf767286d2055efcbf0fb61237e541c4784",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 7287059,
        "transactionHash": "0x2ca54021fe77b4d358f4b0bb712badf767286d2055efcbf0fb61237e541c4784",
        "address": "0xa53d56000D3bEa595Ea5b13F7dA928541B75a0E4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aada627eac5cad86acc8f0dcd01de15a52a44bbd"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0x595e6645d6b6d562f75fe483bb1a1e2cd41fcbd7ecb430eaa4e6c06deb440700"
      }
    ],
    "blockNumber": 7287059,
    "cumulativeGasUsed": "4012763",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x426f78dDd5ad5e49Ef757862B81234Ee81Fcb0Be",
    "0xa49576A2e6F23807661F47971DF91C1069030e36"
  ],
  "numDeployments": 1,
  "solcInputHash": "78462f9f9de58da415b91e19007c31b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"direction\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"LiquidityAdded(address,uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of tokenA added to the liquidity pool.\",\"amountB\":\"The amount of tokenB added to the liquidity pool.\",\"provider\":\"The address of the provider who adds liquidity.\"}},\"LiquidityRemoved(address,uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of tokenA removed from the liquidity pool.\",\"amountB\":\"The amount of tokenB removed from the liquidity pool.\",\"provider\":\"The address of the provider who removes liquidity.\"}},\"Swapped(address,uint256,uint256,string)\":{\"params\":{\"amountIn\":\"The amount of input token (either tokenA or tokenB) that was swapped.\",\"amountOut\":\"The amount of output token (either tokenA or tokenB) received after the swap.\",\"direction\":\"A string that indicates the swap direction.  (\\\"SwapAforB\\\" for tokenA to tokenB swap, \\\"SwapBforA\\\" for tokenB to tokenA swap).\",\"user\":\"The address of the user who performs the swap.\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"details\":\"This function allows the owner to add liquidity to the pool.  Both `amountA` and `amountB` must be greater than zero.\",\"params\":{\"amountA\":\"**_amountA** The amount of tokenA to add.\",\"amountB\":\"**_amountB** The amount of tokenB to add.\"}},\"constructor\":{\"details\":\"This constructor initializes the contract with the addresses of tokenA and tokenB to be used in the DEX. It also sets the owner of the contract as the account deploying the contract.\",\"params\":{\"_tokenA\":\"The address of the tokenA contract that will be used in the DEX.\",\"_tokenB\":\"The address of the tokenB contract that will be used in the DEX.\"}},\"getPrice(address)\":{\"details\":\"This function calculates the price of a token by dividing the  reserve of the other token by the reserve of the requested token.\",\"params\":{\"_token\":\"**_token** The address of the token for which to get the price.\"},\"returns\":{\"_0\":\"price The calculated price of the token.\"}},\"getReserves()\":{\"details\":\"This function returns the balance of tokenA and tokenB in the contract. It is a view function and does not modify the state.\",\"returns\":{\"_0\":\"reserveA  The current balance of tokenA in the contract.\",\"_1\":\"reserveB  The current balance of tokenB in the contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(uint256,uint256)\":{\"details\":\"This function allows the owner to remove liquidity from the pool.  The amount of tokens removed cannot exceed the pool's reserves.\",\"params\":{\"amountA\":\"**_amountA** The amount of tokenA to remove.\",\"amountB\":\"**_amountB** The amount of tokenB to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swapAforB(uint256)\":{\"details\":\"This function allows users to swap tokenA for tokenB.  `amountAIn` must be greater than zero.\",\"params\":{\"amountAIn\":\"**_amountAIn** The amount of tokenA to swap.\"}},\"swapBforA(uint256)\":{\"details\":\"This function allows users to swap tokenB for tokenA.  `amountBIn` must be greater than zero.\",\"params\":{\"amountBIn\":\"**_amountBIn** The amount of tokenB to swap.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAdded(address,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is added to the pool.\"},\"LiquidityRemoved(address,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is removed from the pool.\"},\"Swapped(address,uint256,uint256,string)\":{\"notice\":\"Emitted when a swap occurs between tokenA and tokenB.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"notice\":\"Add liquidity to the pool. Only accessible by the owner.\"},\"constructor\":{\"notice\":\"Constructor for the SimpleDEX contract.\"},\"getPrice(address)\":{\"notice\":\"Get the price of a token in terms of the other token.\"},\"getReserves()\":{\"notice\":\"Retrieves the current reserves of tokens held by the contract.\"},\"removeLiquidity(uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool. Only accessible by the owner.\"},\"swapAforB(uint256)\":{\"notice\":\"Swap TokenA for TokenB. User sends tokenA to receive tokenB.\"},\"swapBforA(uint256)\":{\"notice\":\"Swap TokenB for TokenA. User sends tokenB to receive tokenA.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDex.sol\":\"SimpleDex\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleDex.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract SimpleDex is Ownable {\\r\\n    IERC20 public tokenA;\\r\\n    IERC20 public tokenB;\\r\\n    /**\\r\\n        @notice Emitted when liquidity is added to the pool.\\r\\n        @param provider The address of the provider who adds liquidity.\\r\\n        @param amountA The amount of tokenA added to the liquidity pool.\\r\\n        @param amountB The amount of tokenB added to the liquidity pool.\\r\\n    */\\r\\n    event LiquidityAdded(address indexed provider, uint256 amountA, uint256 amountB);\\r\\n    /**\\r\\n        @notice Emitted when liquidity is removed from the pool.\\r\\n        @param provider The address of the provider who removes liquidity.\\r\\n        @param amountA The amount of tokenA removed from the liquidity pool.\\r\\n        @param amountB The amount of tokenB removed from the liquidity pool.\\r\\n    */\\r\\n    event LiquidityRemoved(address indexed provider, uint256 amountA, uint256 amountB);\\r\\n    /**\\r\\n        @notice Emitted when a swap occurs between tokenA and tokenB.\\r\\n        @param user The address of the user who performs the swap.\\r\\n        @param amountIn The amount of input token (either tokenA or tokenB) that was swapped.\\r\\n        @param amountOut The amount of output token (either tokenA or tokenB) received after the swap.\\r\\n        @param direction A string that indicates the swap direction. \\r\\n                        (\\\"SwapAforB\\\" for tokenA to tokenB swap, \\\"SwapBforA\\\" for tokenB to tokenA swap).\\r\\n    */\\r\\n    event Swapped(address indexed user, uint256 amountIn, uint256 amountOut, string direction);\\r\\n\\r\\n    /**\\r\\n        @notice Constructor for the SimpleDEX contract.\\r\\n        @param _tokenA The address of the tokenA contract that will be used in the DEX.\\r\\n        @param _tokenB The address of the tokenB contract that will be used in the DEX.\\r\\n        \\r\\n        @dev This constructor initializes the contract with the addresses of tokenA and tokenB to be used in the DEX.\\r\\n            It also sets the owner of the contract as the account deploying the contract.\\r\\n    */\\r\\n    constructor(address _tokenA, address _tokenB) Ownable(msg.sender) {\\r\\n        tokenA = IERC20(_tokenA);\\r\\n        tokenB = IERC20(_tokenB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Add liquidity to the pool. Only accessible by the owner.\\r\\n\\r\\n        @param amountA  **_amountA** The amount of tokenA to add.\\r\\n        @param amountB  **_amountB** The amount of tokenB to add.\\r\\n\\r\\n        @dev This function allows the owner to add liquidity to the pool. \\r\\n             Both `amountA` and `amountB` must be greater than zero.\\r\\n    */ \\r\\n    function addLiquidity(uint256 amountA, uint256 amountB) public onlyOwner {\\r\\n        require(amountA > 0 && amountB > 0, \\\"Invalid amounts\\\");\\r\\n\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Remove liquidity from the pool. Only accessible by the owner.\\r\\n\\r\\n        @param amountA  **_amountA** The amount of tokenA to remove.\\r\\n        @param amountB  **_amountB** The amount of tokenB to remove.\\r\\n\\r\\n        @dev This function allows the owner to remove liquidity from the pool. \\r\\n             The amount of tokens removed cannot exceed the pool's reserves.\\r\\n    */ \\r\\n    function removeLiquidity(uint256 amountA, uint256 amountB) public onlyOwner {\\r\\n        uint256 reserveA = tokenA.balanceOf(address(this));\\r\\n        uint256 reserveB = tokenB.balanceOf(address(this));\\r\\n        require(amountA <= reserveA && amountB <= reserveB, \\\"Not enough liquidity\\\");\\r\\n\\r\\n        tokenA.transfer(msg.sender, amountA);\\r\\n        tokenB.transfer(msg.sender, amountB);\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Swap TokenA for TokenB. User sends tokenA to receive tokenB.\\r\\n\\r\\n        @param amountAIn  **_amountAIn** The amount of tokenA to swap.\\r\\n\\r\\n        @dev This function allows users to swap tokenA for tokenB. \\r\\n             `amountAIn` must be greater than zero.\\r\\n    */\\r\\n    function swapAforB(uint256 amountAIn) public {\\r\\n        require(amountAIn > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        uint256 amountBOut = getAmountOut(amountAIn, tokenA.balanceOf(address(this)), tokenB.balanceOf(address(this)), true);\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountAIn);\\r\\n        tokenB.transfer(msg.sender, amountBOut);\\r\\n        emit Swapped(msg.sender, amountAIn, amountBOut, \\\"SwapAforB\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /** \\r\\n        @notice Swap TokenB for TokenA. User sends tokenB to receive tokenA.\\r\\n\\r\\n        @param amountBIn  **_amountBIn** The amount of tokenB to swap.\\r\\n\\r\\n        @dev This function allows users to swap tokenB for tokenA. \\r\\n             `amountBIn` must be greater than zero.\\r\\n    */\\r\\n    function swapBforA(uint256 amountBIn) public {\\r\\n        require(amountBIn > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        uint256 amountAOut = getAmountOut(amountBIn, tokenB.balanceOf(address(this)), tokenA.balanceOf(address(this)), false);\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountBIn);\\r\\n        tokenA.transfer(msg.sender, amountAOut);\\r\\n        emit Swapped(msg.sender, amountBIn, amountAOut, \\\"SwapBforA\\\");\\r\\n    }\\r\\n    /**\\r\\n        @notice Get the price of a token in terms of the other token.\\r\\n\\r\\n        @param _token  **_token** The address of the token for which to get the price.\\r\\n\\r\\n        @dev This function calculates the price of a token by dividing the \\r\\n             reserve of the other token by the reserve of the requested token.\\r\\n\\r\\n        @return price The calculated price of the token.\\r\\n    */\\r\\n    function getPrice(address _token) public view returns (uint256) {\\r\\n        address tokenAAddress = address(tokenA);\\r\\n        address tokenBAddress = address(tokenB);\\r\\n\\r\\n        uint256 reserveA = tokenA.balanceOf(address(this));\\r\\n        uint256 reserveB = tokenB.balanceOf(address(this));\\r\\n\\r\\n        require(_token == tokenAAddress || _token == tokenBAddress, \\\"Invalid token address\\\");\\r\\n\\r\\n        if (_token == tokenAAddress) {\\r\\n            return reserveB / reserveA;\\r\\n        } else {\\r\\n            return reserveA / reserveB;\\r\\n        }\\r\\n    }\\r\\n     /**\\r\\n        @notice Calculates the amount of output token to be received in a swap.\\r\\n        \\r\\n        @param amountIn  **_amountIn** The amount of input token for the swap.\\r\\n        @param reserveTokenA  **_reserveTokenA** The current reserve of tokenA.\\r\\n        @param reserveTokenB  **_reserveTokenB** The current reserve of tokenB.\\r\\n        @param isAforB  **_isAforB** A boolean indicating if it's a swap from TokenA to TokenB (true) or TokenB to TokenA (false).\\r\\n        \\r\\n        @dev This function calculates the amount of output token (TokenA or TokenB) based on the input amount and reserves.\\r\\n             It uses a simplified constant product formula for AMM swaps.\\r\\n        \\r\\n        @return amountOut  The amount of output token received.\\r\\n    */\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveTokenA, uint256 reserveTokenB,bool isAforB) internal pure returns (uint256) {\\r\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\r\\n        if (isAforB) {\\r\\n            return reserveTokenB - (reserveTokenA * reserveTokenB) / (reserveTokenA + amountIn);\\r\\n        } else {\\r\\n            return (reserveTokenA * reserveTokenB) / (reserveTokenB - amountIn) - reserveTokenA;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Retrieves the current reserves of tokens held by the contract.\\r\\n        \\r\\n        @dev This function returns the balance of tokenA and tokenB in the contract.\\r\\n            It is a view function and does not modify the state.\\r\\n        \\r\\n        @return reserveA  The current balance of tokenA in the contract.\\r\\n        @return reserveB  The current balance of tokenB in the contract.\\r\\n    */\\r\\n    function getReserves() public view returns (uint256, uint256) {\\r\\n        uint256 reserveA = tokenA.balanceOf(address(this));\\r\\n        uint256 reserveB = tokenB.balanceOf(address(this));\\r\\n        return (reserveA, reserveB);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x962fb12ecd91e002d68477e889f33336488f89d055fe58bf3fabd8933ca0f1d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "LiquidityAdded(address,uint256,uint256)": {
        "params": {
          "amountA": "The amount of tokenA added to the liquidity pool.",
          "amountB": "The amount of tokenB added to the liquidity pool.",
          "provider": "The address of the provider who adds liquidity."
        }
      },
      "LiquidityRemoved(address,uint256,uint256)": {
        "params": {
          "amountA": "The amount of tokenA removed from the liquidity pool.",
          "amountB": "The amount of tokenB removed from the liquidity pool.",
          "provider": "The address of the provider who removes liquidity."
        }
      },
      "Swapped(address,uint256,uint256,string)": {
        "params": {
          "amountIn": "The amount of input token (either tokenA or tokenB) that was swapped.",
          "amountOut": "The amount of output token (either tokenA or tokenB) received after the swap.",
          "direction": "A string that indicates the swap direction.  (\"SwapAforB\" for tokenA to tokenB swap, \"SwapBforA\" for tokenB to tokenA swap).",
          "user": "The address of the user who performs the swap."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "details": "This function allows the owner to add liquidity to the pool.  Both `amountA` and `amountB` must be greater than zero.",
        "params": {
          "amountA": "**_amountA** The amount of tokenA to add.",
          "amountB": "**_amountB** The amount of tokenB to add."
        }
      },
      "constructor": {
        "details": "This constructor initializes the contract with the addresses of tokenA and tokenB to be used in the DEX. It also sets the owner of the contract as the account deploying the contract.",
        "params": {
          "_tokenA": "The address of the tokenA contract that will be used in the DEX.",
          "_tokenB": "The address of the tokenB contract that will be used in the DEX."
        }
      },
      "getPrice(address)": {
        "details": "This function calculates the price of a token by dividing the  reserve of the other token by the reserve of the requested token.",
        "params": {
          "_token": "**_token** The address of the token for which to get the price."
        },
        "returns": {
          "_0": "price The calculated price of the token."
        }
      },
      "getReserves()": {
        "details": "This function returns the balance of tokenA and tokenB in the contract. It is a view function and does not modify the state.",
        "returns": {
          "_0": "reserveA  The current balance of tokenA in the contract.",
          "_1": "reserveB  The current balance of tokenB in the contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(uint256,uint256)": {
        "details": "This function allows the owner to remove liquidity from the pool.  The amount of tokens removed cannot exceed the pool's reserves.",
        "params": {
          "amountA": "**_amountA** The amount of tokenA to remove.",
          "amountB": "**_amountB** The amount of tokenB to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swapAforB(uint256)": {
        "details": "This function allows users to swap tokenA for tokenB.  `amountAIn` must be greater than zero.",
        "params": {
          "amountAIn": "**_amountAIn** The amount of tokenA to swap."
        }
      },
      "swapBforA(uint256)": {
        "details": "This function allows users to swap tokenB for tokenA.  `amountBIn` must be greater than zero.",
        "params": {
          "amountBIn": "**_amountBIn** The amount of tokenB to swap."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityAdded(address,uint256,uint256)": {
        "notice": "Emitted when liquidity is added to the pool."
      },
      "LiquidityRemoved(address,uint256,uint256)": {
        "notice": "Emitted when liquidity is removed from the pool."
      },
      "Swapped(address,uint256,uint256,string)": {
        "notice": "Emitted when a swap occurs between tokenA and tokenB."
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "notice": "Add liquidity to the pool. Only accessible by the owner."
      },
      "constructor": {
        "notice": "Constructor for the SimpleDEX contract."
      },
      "getPrice(address)": {
        "notice": "Get the price of a token in terms of the other token."
      },
      "getReserves()": {
        "notice": "Retrieves the current reserves of tokens held by the contract."
      },
      "removeLiquidity(uint256,uint256)": {
        "notice": "Remove liquidity from the pool. Only accessible by the owner."
      },
      "swapAforB(uint256)": {
        "notice": "Swap TokenA for TokenB. User sends tokenA to receive tokenB."
      },
      "swapBforA(uint256)": {
        "notice": "Swap TokenB for TokenA. User sends tokenB to receive tokenA."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleDex.sol:SimpleDex",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 264,
        "contract": "contracts/SimpleDex.sol:SimpleDex",
        "label": "tokenA",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 267,
        "contract": "contracts/SimpleDex.sol:SimpleDex",
        "label": "tokenB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)225"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}